#VM 생성 및 Resource Group 등 생성
-----------------------------------------------
리소스그룹 : jdwon-rsgrp
ACR   이름 : jdwon
AKS   이름 : jdwon-aks     (node 갯수=4)

#AKS 접속 및 ACR 연결(azure shell에서 작업)
------------------------------------------------
az aks get-credentials --resource-group jdwon-rsgrp --name jdwon-aks
az aks update -n jdwon-aks -g jdwon-rsgrp --attach-acr jdwon

#Helm 및 kafka 설치..내일
------------------------------------------------
helm version     => 버전확인(3.4 이상이어야 함)
kubectl create ns kafka    => Namespace 생성
helm install my-kafka --namespace kafka incubator/kafka
kubectl --namespace kube-system create sa tiller
kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
helm repo add incubator https://charts.helm.sh/incubator
helm repo update
helm install my-kafka --namespace kafka incubator/kafka

#Httpie 설치
------------------------------------------------
cat <<EOF | kubectl apply -f -
apiVersion: "v1"
kind: "Pod"
metadata:
  name: httpie
  labels:
    name: httpie
spec:
  containers:
    - name: httpie
      image: clue/httpie
      command:
        - sleep
        - "360000"
EOF

#Git Hub에서 소스코드 가져옴
-----------------------------------------------
git clone https://github.com/jongdukwon/sk2.git

#소스코드 빌드/컨테이너 이미지 생성
=>각각의 마이크로 서비스 디렉토리로 이동하여 실행
-----------------------------------------------
cd reservation
mvn package   
az acr build --registry jdwon --image jdwon.azurecr.io/reservation:v2 .  

이미지 Prefix : jdwon.azurecr.io/customercenter:v2
                jdwon.azurecr.io/deposit:v2
                jdwon.azurecr.io/restaurant:v2
                jdwon.azurecr.io/reservation:v2
                jdwon.azurecr.io/gateway:v2
                
# Deploy, Service Expose > Yaml 파일로 배포, sk2 Namespace에 배포함 (sk2 directory로 이동)              
-----------------------------------------------               
kubeclt apply -f sk2-deployment.yaml -n sk2

# gateway는 API로 별도배포함
kubectl create deploy gateway --image=jdwon.azurecr.io/gateway:v2 -n sk2
kubectl expose deploy gateway --type=LoadBalancer --port=8080 -n sk2

# 확인(geteway service의 IP를 먼저 확인해 둘 것: ClusterIP, External_IP 상관없음)
-----------------------------------------------
kubectl exec -it httpie -- bin/bash
root@httpie:/# http POST http://10.0.248.223:8080/reservations restaurantNo=10 day=20140301
----------------------------------------------------------------------------------------------
>>결과화면 Sample
HTTP/1.1 201 Created
Content-Type: application/json;charset=UTF-8
Date: Mon, 08 Feb 2021 14:05:20 GMT
Location: http://reservation:8080/reservations/4
transfer-encoding: chunked

{
    "_links": {
        "reservation": {
            "href": "http://reservation:8080/reservations/4"
        },
        "self": {
            "href": "http://reservation:8080/reservations/4"
        }
    },
    "day": "20140301",
    "restaurantNo": "10",
    "status": "DepositPayed"
}
-------------------------------------------------------------------------------------------


# Kafka Topic 생성
-------------------------------------------------------------------------------------------
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic restaurant --create --partitions 1 --replication-factor 1
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --list                       <==생성한 Topic 확인
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic restaurant --delete  <= Topic 삭제(필요한 경우에만 사용)

# Kafka 이벤트 수신
-------------------------------------------------------------------------------------------
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-consumer --bootstrap-server my-kafka:9092 --topic restaurant --from-beginning






                
                
                
                
